diff --git a/LoremIpsumBundle/tests/KnpUIpsumTest.php b/LoremIpsumBundle/tests/KnpUIpsumTest.php
new file mode 100644
index 0000000..fb82db7
--- /dev/null
+++ b/LoremIpsumBundle/tests/KnpUIpsumTest.php
@@ -0,0 +1,67 @@
+<?php
+
+namespace App\Tests\Service;
+
+use KnpU\LoremIpsumBundle\KnpUIpsum;
+use KnpU\LoremIpsumBundle\KnpUWordProvider;
+use PHPUnit\Framework\TestCase;
+
+class KnpUIpsumTest extends TestCase
+{
+    public function testGetWords()
+    {
+        $ipsum = new KnpUIpsum(new KnpUWordProvider());
+
+        $words = $ipsum->getWords(1);
+        $this->assertInternalType('string', $words);
+        $this->assertCount(1, explode(' ', $words));
+
+        $words = $ipsum->getWords(10);
+        $this->assertCount(10, explode(' ', $words));
+
+        $words = $ipsum->getWords(10, true);
+        $this->assertCount(10, $words);
+    }
+
+    public function testGetSentences()
+    {
+        $ipsum = new KnpUIpsum(new KnpUWordProvider());
+
+        $text = $ipsum->getSentences(3);
+        $this->assertEquals(3, substr_count($text, '.'));
+        $sentences = explode('.', $text);
+        // 3 items will be the sentences, then one final empty entry for the last period
+        $this->assertCount(4, $sentences);
+        // the second and third entries should start with a space
+        $this->assertEquals(' ', $sentences[1][0]);
+        $this->assertEquals(' ', $sentences[2][0]);
+    }
+
+    public function testGetParagraphs()
+    {
+        // weird: using a loop because the results are random, and so
+        // they may pass several times by luck
+        for ($i = 0; $i < 100; $i++) {
+            $ipsum = new KnpUIpsum(new KnpUWordProvider());
+            $text = $ipsum->getParagraphs(3);
+            $paragraphs = explode("\n\n", $text);
+            $this->assertCount(3, $paragraphs);
+
+            foreach ($paragraphs as $paragraph) {
+                // default constructor args should give us 1 unicorn & 3 sunshines
+                $this->assertGreaterThanOrEqual(
+                    1,
+                    substr_count(strtolower($paragraph), 'unicorn'),
+                    sprintf('Text "%s" does not contain 1 unicorn', $paragraph)
+                );
+                $this->assertGreaterThanOrEqual(
+                    3,
+                    substr_count(strtolower($paragraph), 'sunshine'),
+                    sprintf('Text "%s" does not contain 3 sunshine', $paragraph)
+                );
+            }
+
+            $i++;
+        }
+    }
+}
\ No newline at end of file
diff --git a/tests/Service/KnpUIpsumTest.php b/tests/Service/KnpUIpsumTest.php
deleted file mode 100644
index fb82db7..0000000
--- a/tests/Service/KnpUIpsumTest.php
+++ /dev/null
@@ -1,67 +0,0 @@
-<?php
-
-namespace App\Tests\Service;
-
-use KnpU\LoremIpsumBundle\KnpUIpsum;
-use KnpU\LoremIpsumBundle\KnpUWordProvider;
-use PHPUnit\Framework\TestCase;
-
-class KnpUIpsumTest extends TestCase
-{
-    public function testGetWords()
-    {
-        $ipsum = new KnpUIpsum(new KnpUWordProvider());
-
-        $words = $ipsum->getWords(1);
-        $this->assertInternalType('string', $words);
-        $this->assertCount(1, explode(' ', $words));
-
-        $words = $ipsum->getWords(10);
-        $this->assertCount(10, explode(' ', $words));
-
-        $words = $ipsum->getWords(10, true);
-        $this->assertCount(10, $words);
-    }
-
-    public function testGetSentences()
-    {
-        $ipsum = new KnpUIpsum(new KnpUWordProvider());
-
-        $text = $ipsum->getSentences(3);
-        $this->assertEquals(3, substr_count($text, '.'));
-        $sentences = explode('.', $text);
-        // 3 items will be the sentences, then one final empty entry for the last period
-        $this->assertCount(4, $sentences);
-        // the second and third entries should start with a space
-        $this->assertEquals(' ', $sentences[1][0]);
-        $this->assertEquals(' ', $sentences[2][0]);
-    }
-
-    public function testGetParagraphs()
-    {
-        // weird: using a loop because the results are random, and so
-        // they may pass several times by luck
-        for ($i = 0; $i < 100; $i++) {
-            $ipsum = new KnpUIpsum(new KnpUWordProvider());
-            $text = $ipsum->getParagraphs(3);
-            $paragraphs = explode("\n\n", $text);
-            $this->assertCount(3, $paragraphs);
-
-            foreach ($paragraphs as $paragraph) {
-                // default constructor args should give us 1 unicorn & 3 sunshines
-                $this->assertGreaterThanOrEqual(
-                    1,
-                    substr_count(strtolower($paragraph), 'unicorn'),
-                    sprintf('Text "%s" does not contain 1 unicorn', $paragraph)
-                );
-                $this->assertGreaterThanOrEqual(
-                    3,
-                    substr_count(strtolower($paragraph), 'sunshine'),
-                    sprintf('Text "%s" does not contain 3 sunshine', $paragraph)
-                );
-            }
-
-            $i++;
-        }
-    }
-}
\ No newline at end of file
