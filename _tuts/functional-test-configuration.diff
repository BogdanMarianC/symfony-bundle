diff --git a/LoremIpsumBundle/tests/FunctionalTest.php b/LoremIpsumBundle/tests/FunctionalTest.php
index 2e388d9..922e076 100644
--- a/LoremIpsumBundle/tests/FunctionalTest.php
+++ b/LoremIpsumBundle/tests/FunctionalTest.php
@@ -4,15 +4,17 @@ namespace KnpU\LoremIpsumBundle\Tests;
 
 use KnpU\LoremIpsumBundle\KnpUIpsum;
 use KnpU\LoremIpsumBundle\KnpULoremIpsumBundle;
+use KnpU\LoremIpsumBundle\WordProviderInterface;
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\Config\Loader\LoaderInterface;
+use Symfony\Component\DependencyInjection\ContainerBuilder;
 use Symfony\Component\HttpKernel\Kernel;
 
 class FunctionalTest extends TestCase
 {
     public function testServiceWiring()
     {
-        $kernel = new KnpULoremIpsumTestingKernel('test', true);
+        $kernel = new KnpULoremIpsumTestingKernel();
         $kernel->boot();
         $container = $kernel->getContainer();
 
@@ -20,10 +22,31 @@ class FunctionalTest extends TestCase
         $this->assertInstanceOf(KnpUIpsum::class, $ipsum);
         $this->assertInternalType('string', $ipsum->getParagraphs());
     }
+
+    public function testServiceWiringWithConfiguration()
+    {
+        $kernel = new KnpULoremIpsumTestingKernel([
+            'word_provider' => 'stub_word_list'
+        ]);
+        $kernel->boot();
+        $container = $kernel->getContainer();
+
+        $ipsum = $container->get('knpu_lorem_ipsum.knpu_ipsum');
+        $this->assertContains('stub', $ipsum->getWords(2));
+    }
 }
 
 class KnpULoremIpsumTestingKernel extends Kernel
 {
+    private $knpUIpsumConfig;
+
+    public function __construct(array $knpUIpsumConfig = [])
+    {
+        $this->knpUIpsumConfig = $knpUIpsumConfig;
+
+        parent::__construct('test', true);
+    }
+
     public function registerBundles()
     {
         return [
@@ -33,5 +56,18 @@ class KnpULoremIpsumTestingKernel extends Kernel
 
     public function registerContainerConfiguration(LoaderInterface $loader)
     {
+        $loader->load(function(ContainerBuilder $container) {
+            $container->register('stub_word_list', StubWordList::class);
+
+            $container->loadFromExtension('knpu_lorem_ipsum', $this->knpUIpsumConfig);
+        });
+    }
+}
+
+class StubWordList implements WordProviderInterface
+{
+    public function getWordList(): array
+    {
+        return ['stub', 'stub2'];
     }
 }
