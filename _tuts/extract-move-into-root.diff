diff --git a/LoremIpsumBundle/src/DependencyInjection/Configuration.php b/LoremIpsumBundle/src/DependencyInjection/Configuration.php
new file mode 100644
index 0000000..22880c3
--- /dev/null
+++ b/LoremIpsumBundle/src/DependencyInjection/Configuration.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace KnpU\LoremIpsumBundle\DependencyInjection;
+
+use Symfony\Component\Config\Definition\Builder\TreeBuilder;
+use Symfony\Component\Config\Definition\ConfigurationInterface;
+
+class Configuration implements ConfigurationInterface
+{
+    public function getConfigTreeBuilder()
+    {
+        $treeBuilder = new TreeBuilder();
+        $rootNode = $treeBuilder->root('knpu_lorem_ipsum');
+        $rootNode
+            ->children()
+                ->booleanNode('unicorns_are_real')->defaultTrue()->info('Whether or not you believe in unicorns')->end()
+                ->integerNode('min_sunshine')->defaultValue(3)->info('How much do you like sunshine?')->end()
+                ->scalarNode('word_provider')->defaultNull()->end()
+            ->end()
+        ;
+
+        return $treeBuilder;
+    }
+}
\ No newline at end of file
diff --git a/LoremIpsumBundle/src/DependencyInjection/KnpULoremIpsumExtension.php b/LoremIpsumBundle/src/DependencyInjection/KnpULoremIpsumExtension.php
new file mode 100644
index 0000000..57f9ce3
--- /dev/null
+++ b/LoremIpsumBundle/src/DependencyInjection/KnpULoremIpsumExtension.php
@@ -0,0 +1,33 @@
+<?php
+
+namespace KnpU\LoremIpsumBundle\DependencyInjection;
+
+use Symfony\Component\Config\FileLocator;
+use Symfony\Component\DependencyInjection\ContainerBuilder;
+use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
+use Symfony\Component\DependencyInjection\Reference;
+use Symfony\Component\HttpKernel\DependencyInjection\Extension;
+
+class KnpULoremIpsumExtension extends Extension
+{
+    public function load(array $configs, ContainerBuilder $container)
+    {
+        $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));
+        $loader->load('services.xml');
+
+        $configuration = $this->getConfiguration($configs, $container);
+        $config = $this->processConfiguration($configuration, $configs);
+
+        $definition = $container->getDefinition('knpu_lorem_ipsum.knpu_ipsum');
+        if (null !== $config['word_provider']) {
+            $container->setAlias('knpu_lorem_ipsum.word_provider', $config['word_provider']);
+        }
+        $definition->setArgument(1, $config['unicorns_are_real']);
+        $definition->setArgument(2, $config['min_sunshine']);
+    }
+
+    public function getAlias()
+    {
+        return 'knpu_lorem_ipsum';
+    }
+}
diff --git a/LoremIpsumBundle/src/KnpUIpsum.php b/LoremIpsumBundle/src/KnpUIpsum.php
new file mode 100644
index 0000000..60e59dc
--- /dev/null
+++ b/LoremIpsumBundle/src/KnpUIpsum.php
@@ -0,0 +1,210 @@
+<?php
+
+namespace KnpU\LoremIpsumBundle;
+
+/**
+ * Generate random "lorem ipsum" text KnpUniversity style!
+ *
+ * @author Ryan Weaver <ryan@knpuniversity.com>
+ */
+class KnpUIpsum
+{
+    private $wordProvider;
+
+    private $unicornsAreReal;
+
+    private $minSunshine;
+
+    public function __construct(WordProviderInterface $wordProvider, bool $unicornsAreReal = true, $minSunshine = 3)
+    {
+        $this->wordProvider = $wordProvider;
+        $this->unicornsAreReal = $unicornsAreReal;
+        $this->minSunshine = $minSunshine;
+    }
+
+    /**
+     * Returns several paragraphs of random ipsum text.
+     *
+     * @param int $count
+     * @return string
+     */
+    public function getParagraphs(int $count = 3): string
+    {
+        $paragraphs = array();
+        for ($i = 0; $i < $count; $i++) {
+            $paragraphs[] = $this->addJoy($this->getSentences($this->gauss(5.8, 1.93)));
+        }
+
+        return implode("\n\n", $paragraphs);
+    }
+
+    public function getSentences(int $count = 1): string
+    {
+        $count = $count < 1 ? 1 : $count;
+        $sentences = array();
+
+        for ($i = 0; $i < $count; $i++) {
+            $wordCount = $this->gauss(16, 5.08);
+            // avoid very short sentences
+            $wordCount  = $wordCount < 4 ? 4 : $wordCount;
+            $sentences[] = $this->getWords($wordCount, true);
+        }
+
+        $sentences = $this->punctuate($sentences);
+
+        return implode(' ', $sentences);
+    }
+
+    /**
+     * Credit to joshtronic/php-loremipsum! https://github.com/joshtronic/php-loremipsum
+     *
+     * Generates words of lorem ipsum.
+     *
+     * @access public
+     * @param  integer $count how many words to generate
+     * @param  boolean $asArray whether an array or a string should be returned
+     * @return mixed   string or array of generated lorem ipsum words
+     */
+    public function getWords(int $count = 1, bool $asArray = false)
+    {
+        $count = $count < 1 ? 1 : $count;
+
+        $words = array();
+        $wordCount = 0;
+        $wordList = $this->getWordList();
+
+        // Shuffles and appends the word list to compensate for count
+        // arguments that exceed the size of our vocabulary list
+        while ($wordCount < $count) {
+            $shuffle = true;
+            while ($shuffle) {
+                shuffle($wordList);
+
+                // Checks that the last word of the list and the first word of
+                // the list that's about to be appended are not the same
+                if (!$wordCount || $words[$wordCount - 1] != $wordList[0]) {
+                    $words = array_merge($words, $wordList);
+                    $wordCount = count($words);
+                    $shuffle = false;
+                }
+            }
+        }
+        $words = array_slice($words, 0, $count);
+
+        if (true === $asArray) {
+            return $words;
+        }
+
+        return implode(' ', $words);
+    }
+
+    /**
+     * Credit to joshtronic/php-loremipsum! https://github.com/joshtronic/php-loremipsum
+     *
+     * Gaussian Distribution
+     *
+     * This is some smart kid stuff. I went ahead and combined the N(0,1) logic
+     * with the N(m,s) logic into this single function. Used to calculate the
+     * number of words in a sentence, the number of sentences in a paragraph
+     * and the distribution of commas in a sentence.
+     *
+     * @param  float $mean average value
+     * @param  float $std_dev standard deviation
+     * @return float  calculated distribution
+     */
+    private function gauss(float $mean, float $std_dev): float
+    {
+        $x = mt_rand() / mt_getrandmax();
+        $y = mt_rand() / mt_getrandmax();
+        $z = sqrt(-2 * log($x)) * cos(2 * pi() * $y);
+
+        return $z * $std_dev + $mean;
+    }
+
+    /**
+     * Credit to joshtronic/php-loremipsum! https://github.com/joshtronic/php-loremipsum
+     *
+     * Applies punctuation to a sentence. This includes a period at the end,
+     * the injection of commas as well as capitalizing the first letter of the
+     * first word of the sentence.
+     */
+    private function punctuate(array $sentences): array
+    {
+        foreach ($sentences as $key => $sentence) {
+            $words = count($sentence);
+            // Only worry about commas on sentences longer than 4 words
+            if ($words > 4) {
+                $mean = log($words, 6);
+                $std_dev = $mean / 6;
+                $commas = round($this->gauss($mean, $std_dev));
+                for ($i = 1; $i <= $commas; $i++) {
+                    $word = round($i * $words / ($commas + 1));
+                    if ($word < ($words - 1) && $word > 0) {
+                        $sentence[$word] .= ',';
+                    }
+                }
+            }
+            $sentences[$key] = ucfirst(implode(' ', $sentence) . '.');
+        }
+
+        return $sentences;
+    }
+
+    /**
+     * Guarantee that unicorns and sunshine exist in the text... unless the
+     * person using this class is a grouch and turned that setting off! Boo to you!
+     *
+     * @param string $wordsString
+     * @return string
+     */
+    private function addJoy(string $wordsString): string
+    {
+        $unicornKey = null;
+        if ($this->unicornsAreReal && false === stripos($wordsString, 'unicorn')) {
+            $words = explode(' ', $wordsString);
+            $unicornKey = array_rand($words);
+            $words[$unicornKey] = 'unicorn';
+
+
+            $wordsString = implode(' ', $words);
+        }
+
+        while (substr_count(strtolower($wordsString), 'sunshine') < $this->minSunshine) {
+            $words = explode(' ', $wordsString);
+
+            // if there simply are not enough words, abort immediately
+            if (count($words) < ($this->minSunshine + 1)) {
+                break;
+            }
+
+            $key = null;
+            while (null === $key) {
+                $key = array_rand($words);
+
+                // don't override the unicorn
+                if ($unicornKey === $key) {
+                    $key = null;
+
+                    continue;
+                }
+
+                // if unicorn occurred naturally, don't override it
+                if (null === $unicornKey && 0 === stripos($words[$key], 'unicorn')) {
+                    $key = null;
+
+                    continue;
+                }
+            }
+            $words[$key] = 'sunshine';
+
+            $wordsString = implode(' ', $words);
+        }
+
+        return $wordsString;
+    }
+
+    private function getWordList(): array
+    {
+        return $this->wordProvider->getWordList();
+    }
+}
diff --git a/LoremIpsumBundle/src/KnpULoremIpsumBundle.php b/LoremIpsumBundle/src/KnpULoremIpsumBundle.php
new file mode 100644
index 0000000..e98a59f
--- /dev/null
+++ b/LoremIpsumBundle/src/KnpULoremIpsumBundle.php
@@ -0,0 +1,21 @@
+<?php
+
+namespace KnpU\LoremIpsumBundle;
+
+use KnpU\LoremIpsumBundle\DependencyInjection\KnpULoremIpsumExtension;
+use Symfony\Component\HttpKernel\Bundle\Bundle;
+
+class KnpULoremIpsumBundle extends Bundle
+{
+    /**
+     * Overridden to allow for the custom extension alias.
+     */
+    public function getContainerExtension()
+    {
+        if (null === $this->extension) {
+            $this->extension = new KnpULoremIpsumExtension();
+        }
+
+        return $this->extension;
+    }
+}
diff --git a/LoremIpsumBundle/src/KnpUWordProvider.php b/LoremIpsumBundle/src/KnpUWordProvider.php
new file mode 100644
index 0000000..846def7
--- /dev/null
+++ b/LoremIpsumBundle/src/KnpUWordProvider.php
@@ -0,0 +1,143 @@
+<?php
+
+namespace KnpU\LoremIpsumBundle;
+
+class KnpUWordProvider implements WordProviderInterface
+{
+    public function getWordList(): array
+    {
+        return [
+            'adorable',
+            'active',
+            'admire',
+            'adventurous',
+            'agreeable',
+            'amazing',
+            'angelic',
+            'awesome',
+            'beaming',
+            'beautiful',
+            'believe',
+            'bliss',
+            'brave',
+            'brilliant',
+            'bubbly',
+            'bingo',
+            'champion',
+            'charming',
+            'cheery',
+            'congratulations',
+            'cool',
+            'courageous',
+            'creative',
+            'cute',
+            'dazzling',
+            'delightful',
+            'divine',
+            'ecstatic',
+            'effervescent',
+            'electrifying',
+            'enchanting',
+            'energetic',
+            'engaging',
+            'excellent',
+            'exciting',
+            'exquisite',
+            'fabulous',
+            'fantastic',
+            'flourishing',
+            'fortunate',
+            'free',
+            'fresh',
+            'friendly',
+            'funny',
+            'generous',
+            'genius',
+            'genuine',
+            'giving',
+            'glamorous',
+            'glowing',
+            'good',
+            'gorgeous',
+            'graceful',
+            'great',
+            'grin',
+            'handsome',
+            'happy',
+            'harmonious',
+            'healing',
+            'healthy',
+            'hearty',
+            'heavenly',
+            'honest',
+            'honorable',
+            'hug',
+            'imaginative',
+            'impressive',
+            'independent',
+            'innovative',
+            'inventive',
+            'jovial',
+            'joy',
+            'jubilant',
+            'kind',
+            'laugh',
+            'legendary',
+            'light',
+            'lively',
+            'lovely',
+            'lucky',
+            'luminous',
+            'marvelous',
+            'meaningful',
+            'miraculous',
+            'motivating',
+            'natural',
+            'nice',
+            'nurturing',
+            'open',
+            'optimistic',
+            'paradise',
+            'perfect',
+            'phenomenal',
+            'plentiful',
+            'pleasant',
+            'poised',
+            'polished',
+            'popular',
+            'positive',
+            'pretty',
+            'principled',
+            'proud',
+            'quality',
+            'quintessential',
+            'quick',
+
+            'sunshine',
+            'rainbows',
+            'unicorns',
+            'puns',
+            'butterflies',
+            'cupcakes',
+            'sprinkles',
+            'glitter',
+            'friend',
+            'high-five',
+            'friendship',
+            'compliments',
+            'sunsets',
+            'cookies',
+            'flowers',
+            'bikes',
+            'kittens',
+            'puppies',
+            'macaroni',
+            'freckles',
+            'baguettes',
+            'presents',
+            'fireworks',
+            'chocholate',
+            'marshmallow',
+        ];
+    }
+}
\ No newline at end of file
diff --git a/LoremIpsumBundle/src/Resources/config/services.xml b/LoremIpsumBundle/src/Resources/config/services.xml
new file mode 100644
index 0000000..b1eeba1
--- /dev/null
+++ b/LoremIpsumBundle/src/Resources/config/services.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<container xmlns="http://symfony.com/schema/dic/services"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://symfony.com/schema/dic/services
+        http://symfony.com/schema/dic/services/services-1.0.xsd">
+
+    <services>
+        <service id="knpu_lorem_ipsum.knpu_ipsum" class="KnpU\LoremIpsumBundle\KnpUIpsum" public="true">
+            <argument type="service" id="knpu_lorem_ipsum.word_provider" />
+        </service>
+
+        <service id="knpu_lorem_ipsum.knpu_word_provider" class="KnpU\LoremIpsumBundle\KnpUWordProvider" />
+
+        <service id="knpu_lorem_ipsum.word_provider" alias="knpu_lorem_ipsum.knpu_word_provider" public="false" />
+        <service id="KnpU\LoremIpsumBundle\KnpUIpsum" alias="knpu_lorem_ipsum.knpu_ipsum" public="false" />
+    </services>
+</container>
diff --git a/LoremIpsumBundle/src/WordProviderInterface.php b/LoremIpsumBundle/src/WordProviderInterface.php
new file mode 100644
index 0000000..2297b2d
--- /dev/null
+++ b/LoremIpsumBundle/src/WordProviderInterface.php
@@ -0,0 +1,13 @@
+<?php
+
+namespace KnpU\LoremIpsumBundle;
+
+interface WordProviderInterface
+{
+    /**
+     * Return an array of words to use for the fake text.
+     *
+     * @return array
+     */
+    public function getWordList(): array;
+}
diff --git a/lib/LoremIpsumBundle/src/DependencyInjection/Configuration.php b/lib/LoremIpsumBundle/src/DependencyInjection/Configuration.php
deleted file mode 100644
index 22880c3..0000000
--- a/lib/LoremIpsumBundle/src/DependencyInjection/Configuration.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-namespace KnpU\LoremIpsumBundle\DependencyInjection;
-
-use Symfony\Component\Config\Definition\Builder\TreeBuilder;
-use Symfony\Component\Config\Definition\ConfigurationInterface;
-
-class Configuration implements ConfigurationInterface
-{
-    public function getConfigTreeBuilder()
-    {
-        $treeBuilder = new TreeBuilder();
-        $rootNode = $treeBuilder->root('knpu_lorem_ipsum');
-        $rootNode
-            ->children()
-                ->booleanNode('unicorns_are_real')->defaultTrue()->info('Whether or not you believe in unicorns')->end()
-                ->integerNode('min_sunshine')->defaultValue(3)->info('How much do you like sunshine?')->end()
-                ->scalarNode('word_provider')->defaultNull()->end()
-            ->end()
-        ;
-
-        return $treeBuilder;
-    }
-}
\ No newline at end of file
diff --git a/lib/LoremIpsumBundle/src/DependencyInjection/KnpULoremIpsumExtension.php b/lib/LoremIpsumBundle/src/DependencyInjection/KnpULoremIpsumExtension.php
deleted file mode 100644
index 57f9ce3..0000000
--- a/lib/LoremIpsumBundle/src/DependencyInjection/KnpULoremIpsumExtension.php
+++ /dev/null
@@ -1,33 +0,0 @@
-<?php
-
-namespace KnpU\LoremIpsumBundle\DependencyInjection;
-
-use Symfony\Component\Config\FileLocator;
-use Symfony\Component\DependencyInjection\ContainerBuilder;
-use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
-use Symfony\Component\DependencyInjection\Reference;
-use Symfony\Component\HttpKernel\DependencyInjection\Extension;
-
-class KnpULoremIpsumExtension extends Extension
-{
-    public function load(array $configs, ContainerBuilder $container)
-    {
-        $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));
-        $loader->load('services.xml');
-
-        $configuration = $this->getConfiguration($configs, $container);
-        $config = $this->processConfiguration($configuration, $configs);
-
-        $definition = $container->getDefinition('knpu_lorem_ipsum.knpu_ipsum');
-        if (null !== $config['word_provider']) {
-            $container->setAlias('knpu_lorem_ipsum.word_provider', $config['word_provider']);
-        }
-        $definition->setArgument(1, $config['unicorns_are_real']);
-        $definition->setArgument(2, $config['min_sunshine']);
-    }
-
-    public function getAlias()
-    {
-        return 'knpu_lorem_ipsum';
-    }
-}
diff --git a/lib/LoremIpsumBundle/src/KnpUIpsum.php b/lib/LoremIpsumBundle/src/KnpUIpsum.php
deleted file mode 100644
index 60e59dc..0000000
--- a/lib/LoremIpsumBundle/src/KnpUIpsum.php
+++ /dev/null
@@ -1,210 +0,0 @@
-<?php
-
-namespace KnpU\LoremIpsumBundle;
-
-/**
- * Generate random "lorem ipsum" text KnpUniversity style!
- *
- * @author Ryan Weaver <ryan@knpuniversity.com>
- */
-class KnpUIpsum
-{
-    private $wordProvider;
-
-    private $unicornsAreReal;
-
-    private $minSunshine;
-
-    public function __construct(WordProviderInterface $wordProvider, bool $unicornsAreReal = true, $minSunshine = 3)
-    {
-        $this->wordProvider = $wordProvider;
-        $this->unicornsAreReal = $unicornsAreReal;
-        $this->minSunshine = $minSunshine;
-    }
-
-    /**
-     * Returns several paragraphs of random ipsum text.
-     *
-     * @param int $count
-     * @return string
-     */
-    public function getParagraphs(int $count = 3): string
-    {
-        $paragraphs = array();
-        for ($i = 0; $i < $count; $i++) {
-            $paragraphs[] = $this->addJoy($this->getSentences($this->gauss(5.8, 1.93)));
-        }
-
-        return implode("\n\n", $paragraphs);
-    }
-
-    public function getSentences(int $count = 1): string
-    {
-        $count = $count < 1 ? 1 : $count;
-        $sentences = array();
-
-        for ($i = 0; $i < $count; $i++) {
-            $wordCount = $this->gauss(16, 5.08);
-            // avoid very short sentences
-            $wordCount  = $wordCount < 4 ? 4 : $wordCount;
-            $sentences[] = $this->getWords($wordCount, true);
-        }
-
-        $sentences = $this->punctuate($sentences);
-
-        return implode(' ', $sentences);
-    }
-
-    /**
-     * Credit to joshtronic/php-loremipsum! https://github.com/joshtronic/php-loremipsum
-     *
-     * Generates words of lorem ipsum.
-     *
-     * @access public
-     * @param  integer $count how many words to generate
-     * @param  boolean $asArray whether an array or a string should be returned
-     * @return mixed   string or array of generated lorem ipsum words
-     */
-    public function getWords(int $count = 1, bool $asArray = false)
-    {
-        $count = $count < 1 ? 1 : $count;
-
-        $words = array();
-        $wordCount = 0;
-        $wordList = $this->getWordList();
-
-        // Shuffles and appends the word list to compensate for count
-        // arguments that exceed the size of our vocabulary list
-        while ($wordCount < $count) {
-            $shuffle = true;
-            while ($shuffle) {
-                shuffle($wordList);
-
-                // Checks that the last word of the list and the first word of
-                // the list that's about to be appended are not the same
-                if (!$wordCount || $words[$wordCount - 1] != $wordList[0]) {
-                    $words = array_merge($words, $wordList);
-                    $wordCount = count($words);
-                    $shuffle = false;
-                }
-            }
-        }
-        $words = array_slice($words, 0, $count);
-
-        if (true === $asArray) {
-            return $words;
-        }
-
-        return implode(' ', $words);
-    }
-
-    /**
-     * Credit to joshtronic/php-loremipsum! https://github.com/joshtronic/php-loremipsum
-     *
-     * Gaussian Distribution
-     *
-     * This is some smart kid stuff. I went ahead and combined the N(0,1) logic
-     * with the N(m,s) logic into this single function. Used to calculate the
-     * number of words in a sentence, the number of sentences in a paragraph
-     * and the distribution of commas in a sentence.
-     *
-     * @param  float $mean average value
-     * @param  float $std_dev standard deviation
-     * @return float  calculated distribution
-     */
-    private function gauss(float $mean, float $std_dev): float
-    {
-        $x = mt_rand() / mt_getrandmax();
-        $y = mt_rand() / mt_getrandmax();
-        $z = sqrt(-2 * log($x)) * cos(2 * pi() * $y);
-
-        return $z * $std_dev + $mean;
-    }
-
-    /**
-     * Credit to joshtronic/php-loremipsum! https://github.com/joshtronic/php-loremipsum
-     *
-     * Applies punctuation to a sentence. This includes a period at the end,
-     * the injection of commas as well as capitalizing the first letter of the
-     * first word of the sentence.
-     */
-    private function punctuate(array $sentences): array
-    {
-        foreach ($sentences as $key => $sentence) {
-            $words = count($sentence);
-            // Only worry about commas on sentences longer than 4 words
-            if ($words > 4) {
-                $mean = log($words, 6);
-                $std_dev = $mean / 6;
-                $commas = round($this->gauss($mean, $std_dev));
-                for ($i = 1; $i <= $commas; $i++) {
-                    $word = round($i * $words / ($commas + 1));
-                    if ($word < ($words - 1) && $word > 0) {
-                        $sentence[$word] .= ',';
-                    }
-                }
-            }
-            $sentences[$key] = ucfirst(implode(' ', $sentence) . '.');
-        }
-
-        return $sentences;
-    }
-
-    /**
-     * Guarantee that unicorns and sunshine exist in the text... unless the
-     * person using this class is a grouch and turned that setting off! Boo to you!
-     *
-     * @param string $wordsString
-     * @return string
-     */
-    private function addJoy(string $wordsString): string
-    {
-        $unicornKey = null;
-        if ($this->unicornsAreReal && false === stripos($wordsString, 'unicorn')) {
-            $words = explode(' ', $wordsString);
-            $unicornKey = array_rand($words);
-            $words[$unicornKey] = 'unicorn';
-
-
-            $wordsString = implode(' ', $words);
-        }
-
-        while (substr_count(strtolower($wordsString), 'sunshine') < $this->minSunshine) {
-            $words = explode(' ', $wordsString);
-
-            // if there simply are not enough words, abort immediately
-            if (count($words) < ($this->minSunshine + 1)) {
-                break;
-            }
-
-            $key = null;
-            while (null === $key) {
-                $key = array_rand($words);
-
-                // don't override the unicorn
-                if ($unicornKey === $key) {
-                    $key = null;
-
-                    continue;
-                }
-
-                // if unicorn occurred naturally, don't override it
-                if (null === $unicornKey && 0 === stripos($words[$key], 'unicorn')) {
-                    $key = null;
-
-                    continue;
-                }
-            }
-            $words[$key] = 'sunshine';
-
-            $wordsString = implode(' ', $words);
-        }
-
-        return $wordsString;
-    }
-
-    private function getWordList(): array
-    {
-        return $this->wordProvider->getWordList();
-    }
-}
diff --git a/lib/LoremIpsumBundle/src/KnpULoremIpsumBundle.php b/lib/LoremIpsumBundle/src/KnpULoremIpsumBundle.php
deleted file mode 100644
index e98a59f..0000000
--- a/lib/LoremIpsumBundle/src/KnpULoremIpsumBundle.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-namespace KnpU\LoremIpsumBundle;
-
-use KnpU\LoremIpsumBundle\DependencyInjection\KnpULoremIpsumExtension;
-use Symfony\Component\HttpKernel\Bundle\Bundle;
-
-class KnpULoremIpsumBundle extends Bundle
-{
-    /**
-     * Overridden to allow for the custom extension alias.
-     */
-    public function getContainerExtension()
-    {
-        if (null === $this->extension) {
-            $this->extension = new KnpULoremIpsumExtension();
-        }
-
-        return $this->extension;
-    }
-}
diff --git a/lib/LoremIpsumBundle/src/KnpUWordProvider.php b/lib/LoremIpsumBundle/src/KnpUWordProvider.php
deleted file mode 100644
index 846def7..0000000
--- a/lib/LoremIpsumBundle/src/KnpUWordProvider.php
+++ /dev/null
@@ -1,143 +0,0 @@
-<?php
-
-namespace KnpU\LoremIpsumBundle;
-
-class KnpUWordProvider implements WordProviderInterface
-{
-    public function getWordList(): array
-    {
-        return [
-            'adorable',
-            'active',
-            'admire',
-            'adventurous',
-            'agreeable',
-            'amazing',
-            'angelic',
-            'awesome',
-            'beaming',
-            'beautiful',
-            'believe',
-            'bliss',
-            'brave',
-            'brilliant',
-            'bubbly',
-            'bingo',
-            'champion',
-            'charming',
-            'cheery',
-            'congratulations',
-            'cool',
-            'courageous',
-            'creative',
-            'cute',
-            'dazzling',
-            'delightful',
-            'divine',
-            'ecstatic',
-            'effervescent',
-            'electrifying',
-            'enchanting',
-            'energetic',
-            'engaging',
-            'excellent',
-            'exciting',
-            'exquisite',
-            'fabulous',
-            'fantastic',
-            'flourishing',
-            'fortunate',
-            'free',
-            'fresh',
-            'friendly',
-            'funny',
-            'generous',
-            'genius',
-            'genuine',
-            'giving',
-            'glamorous',
-            'glowing',
-            'good',
-            'gorgeous',
-            'graceful',
-            'great',
-            'grin',
-            'handsome',
-            'happy',
-            'harmonious',
-            'healing',
-            'healthy',
-            'hearty',
-            'heavenly',
-            'honest',
-            'honorable',
-            'hug',
-            'imaginative',
-            'impressive',
-            'independent',
-            'innovative',
-            'inventive',
-            'jovial',
-            'joy',
-            'jubilant',
-            'kind',
-            'laugh',
-            'legendary',
-            'light',
-            'lively',
-            'lovely',
-            'lucky',
-            'luminous',
-            'marvelous',
-            'meaningful',
-            'miraculous',
-            'motivating',
-            'natural',
-            'nice',
-            'nurturing',
-            'open',
-            'optimistic',
-            'paradise',
-            'perfect',
-            'phenomenal',
-            'plentiful',
-            'pleasant',
-            'poised',
-            'polished',
-            'popular',
-            'positive',
-            'pretty',
-            'principled',
-            'proud',
-            'quality',
-            'quintessential',
-            'quick',
-
-            'sunshine',
-            'rainbows',
-            'unicorns',
-            'puns',
-            'butterflies',
-            'cupcakes',
-            'sprinkles',
-            'glitter',
-            'friend',
-            'high-five',
-            'friendship',
-            'compliments',
-            'sunsets',
-            'cookies',
-            'flowers',
-            'bikes',
-            'kittens',
-            'puppies',
-            'macaroni',
-            'freckles',
-            'baguettes',
-            'presents',
-            'fireworks',
-            'chocholate',
-            'marshmallow',
-        ];
-    }
-}
\ No newline at end of file
diff --git a/lib/LoremIpsumBundle/src/Resources/config/services.xml b/lib/LoremIpsumBundle/src/Resources/config/services.xml
deleted file mode 100644
index b1eeba1..0000000
--- a/lib/LoremIpsumBundle/src/Resources/config/services.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<container xmlns="http://symfony.com/schema/dic/services"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://symfony.com/schema/dic/services
-        http://symfony.com/schema/dic/services/services-1.0.xsd">
-
-    <services>
-        <service id="knpu_lorem_ipsum.knpu_ipsum" class="KnpU\LoremIpsumBundle\KnpUIpsum" public="true">
-            <argument type="service" id="knpu_lorem_ipsum.word_provider" />
-        </service>
-
-        <service id="knpu_lorem_ipsum.knpu_word_provider" class="KnpU\LoremIpsumBundle\KnpUWordProvider" />
-
-        <service id="knpu_lorem_ipsum.word_provider" alias="knpu_lorem_ipsum.knpu_word_provider" public="false" />
-        <service id="KnpU\LoremIpsumBundle\KnpUIpsum" alias="knpu_lorem_ipsum.knpu_ipsum" public="false" />
-    </services>
-</container>
diff --git a/lib/LoremIpsumBundle/src/WordProviderInterface.php b/lib/LoremIpsumBundle/src/WordProviderInterface.php
deleted file mode 100644
index 2297b2d..0000000
--- a/lib/LoremIpsumBundle/src/WordProviderInterface.php
+++ /dev/null
@@ -1,13 +0,0 @@
-<?php
-
-namespace KnpU\LoremIpsumBundle;
-
-interface WordProviderInterface
-{
-    /**
-     * Return an array of words to use for the fake text.
-     *
-     * @return array
-     */
-    public function getWordList(): array;
-}
